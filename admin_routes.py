# admin_routes.py - VERS√ÉO FINAL CORRIGIDA
import os
import json
from flask import Blueprint, request, jsonify
from functools import wraps
import jwt
from datetime import datetime, timedelta
import psycopg2
from psycopg2.extras import RealDictCursor

admin_bp = Blueprint('admin', __name__)

# ‚úÖ CONFIGURA√á√ÉO √öNICA - Evitar conflitos
def get_db_connection():
    """Conex√£o √∫nica com o banco para evitar conflitos"""
    DATABASE_URL = os.getenv('DATABASE_URL')
    if not DATABASE_URL:
        raise ValueError("DATABASE_URL n√£o configurada")
    
    conn = psycopg2.connect(DATABASE_URL)
    conn.autocommit = False
    return conn

# ‚úÖ CONSTANTES GLOBAIS - Evitar rec√°lculos
ALZ_PRICE_BRL = 0.10  # 1 ALZ = R$ 0,10
SITE_ADMIN_TOKEN = os.getenv('VITE_SITE_ADMIN_TOKEN', 'allianza_super_admin_2024_CdE25$$$')

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        token = request.headers.get('Authorization', '').replace('Bearer ', '')
        
        if not token:
            return jsonify({"error": "Token de administrador necess√°rio"}), 401
        
        # ‚úÖ VERIFICA√á√ÉO DE TOKEN CORRIGIDA
        if token != SITE_ADMIN_TOKEN:
            return jsonify({
                "error": "Token inv√°lido",
                "received": token[:10] + "..." if token else "vazio",
                "expected": SITE_ADMIN_TOKEN[:10] + "..."
            }), 401
        
        return f(*args, **kwargs)
    return decorated_function

# ‚úÖ FUN√á√ÉO DE C√ÅLCULO GLOBAL
def calculate_alz_from_brl(amount_brl):
    """Calcula ALZ a partir de BRL de forma consistente"""
    return float(amount_brl) / ALZ_PRICE_BRL

# ‚úÖ ROTA DE HEALTH CHECK MELHORADA
@admin_bp.route('/health', methods=['GET'])
def health_check():
    """Verifica sa√∫de do backend e banco"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Testar conex√£o com banco
        cursor.execute("SELECT 1 as status")
        db_status = cursor.fetchone()
        
        # Testar tabelas
        cursor.execute("""
            SELECT 
                (SELECT COUNT(*) FROM payments) as payments_count,
                (SELECT COUNT(*) FROM users) as users_count,
                (SELECT COUNT(*) FROM balances) as balances_count
        """)
        tables_status = cursor.fetchone()
        
        conn.close()
        
        return jsonify({
            "status": "healthy",
            "database": "connected",
            "timestamp": datetime.utcnow().isoformat(),
            "tables": {
                "payments": tables_status['payments_count'],
                "users": tables_status['users_count'],
                "balances": tables_status['balances_count']
            }
        }), 200
        
    except Exception as e:
        return jsonify({
            "status": "unhealthy",
            "database": "disconnected",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }), 500

# ‚úÖ DASHBOARD CORRIGIDO
@admin_bp.route('/admin/payments', methods=['GET'])
@admin_required
def get_payments():
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        print("üì• Buscando pagamentos do banco...")
        
        cursor.execute('''
            SELECT id, email, amount, method, status, created_at, 
                   processed_at, tx_hash, metadata, wallet_address
            FROM payments 
            ORDER BY created_at DESC
        ''')
        payments = cursor.fetchall()
        
        print(f"‚úÖ Encontrados {len(payments)} pagamentos")
        
        # ‚úÖ CORRE√á√ÉO GARANTIDA - C√°lculo consistente
        corrected_payments = []
        for payment in payments:
            payment_data = dict(payment)
            amount_brl = float(payment_data['amount'])
            
            # SEMPRE calcular ALZ a partir do BRL
            payment_data['alz_amount'] = calculate_alz_from_brl(amount_brl)
            
            # Log para debug
            print(f"üí∞ Pagamento {payment_data['id']}: R$ {amount_brl} ‚Üí {payment_data['alz_amount']} ALZ")
            
            corrected_payments.append(payment_data)
        
        return jsonify({
            "success": True,
            "data": corrected_payments,
            "count": len(corrected_payments),
            "calculation_note": "ALZ = BRL / 0.10 (1 ALZ = R$ 0,10)"
        }), 200
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar pagamentos: {str(e)}")
	        return jsonify({"error": f"Erro no servidor: {str(e)}"}), 500
	    finally:
	        conn.close()

# ‚úÖ ROTA PARA LISTAR TODOS OS STAKES
@admin_bp.route('/admin/stakes', methods=['GET'])
@admin_required
def get_all_stakes():
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        print("üì• Buscando todos os stakes do banco...")
        
        # Buscar todos os stakes (ativos e inativos)
        cursor.execute('''
            SELECT id, user_id, asset, amount, duration, apy, start_date, end_date, 
                   estimated_reward, accrued_reward, status, auto_compound, last_reward_claim, 
                   days_remaining, early_withdrawal_penalty, actual_return, penalty_applied, 
                   withdrawn_at, metadata
            FROM stakes 
            ORDER BY created_at DESC
        ''')
        stakes = cursor.fetchall()
        
        print(f"‚úÖ Encontrados {len(stakes)} stakes")
        
        # Formatar a sa√≠da (datas, floats)
        formatted_stakes = []
        for stake in stakes:
            formatted_stake = dict(stake)
            
            # Converter datas para ISO format
            for key in ['start_date', 'end_date', 'last_reward_claim', 'withdrawn_at']:
                if formatted_stake[key] and hasattr(formatted_stake[key], 'isoformat'):
                    formatted_stake[key] = formatted_stake[key].isoformat()
                elif formatted_stake[key]:
                    formatted_stake[key] = formatted_stake[key].strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            
            # Garantir que os num√©ricos sejam floats
            for key in ['amount', 'apy', 'estimated_reward', 'accrued_reward', 'early_withdrawal_penalty', 'actual_return', 'penalty_applied']:
                if formatted_stake[key] is not None:
                    formatted_stake[key] = float(formatted_stake[key])

            formatted_stakes.append(formatted_stake)
        
        return jsonify({
            "success": True,
            "data": formatted_stakes,
            "count": len(formatted_stakes)
        }), 200
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar stakes: {str(e)}")
        return jsonify({"error": f"Erro no servidor: {str(e)}"}), 500
    finally:
        conn.close()

# ‚úÖ ROTA PARA UNSTAKE FOR√áADO PELO ADMIN
@admin_bp.route('/admin/unstake', methods=['POST'])
@admin_required
def admin_unstake():
    # Importa√ß√µes necess√°rias para a l√≥gica de unstake
    from datetime import datetime, timezone
    from backend_staking_routes import safe_days_remaining, update_stake_rewards
    
    data = request.json
    stake_id = data.get('stake_id')
    user_id = data.get('user_id')
    confirm_early_withdrawal = data.get('confirm_early_withdrawal', False)
    
    if not stake_id or not user_id:
        return jsonify({"error": "stake_id e user_id s√£o obrigat√≥rios"}), 400

    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        # 1. Buscar o stake
        cursor.execute("SELECT * FROM stakes WHERE id = %s AND user_id = %s", (stake_id, user_id))
        stake = cursor.fetchone()
        
        if not stake:
            return jsonify({"error": "Stake n√£o encontrado"}), 404
        
        if stake["status"] != "active":
            return jsonify({"error": "Stake n√£o est√° ativo"}), 400

        # 2. Atualizar recompensas antes de processar o unstake
        # Nota: update_stake_rewards gerencia sua pr√≥pria conex√£o, ent√£o √© seguro chamar.
        update_stake_rewards(stake_id) 
        
        # Re-buscar o stake ap√≥s a atualiza√ß√£o de recompensas
        cursor.execute("SELECT * FROM stakes WHERE id = %s AND user_id = %s", (stake_id, user_id))
        stake = cursor.fetchone()
        
        # 3. Buscar o saldo de staking para o asset
        cursor.execute("SELECT staking_balance FROM balances WHERE user_id = %s AND asset = %s", (user_id, stake["asset"]))
        balance_result = cursor.fetchone()
        
        if not balance_result or float(balance_result["staking_balance"]) < float(stake["amount"]):
             return jsonify({"error": "Erro de consist√™ncia: Saldo de staking insuficiente para retirada"}), 500

        # ‚úÖ USAR FUN√á√ÉO CORRIGIDA
        days_remaining = safe_days_remaining(stake["end_date"])
        
        is_early_withdrawal = days_remaining > 0
        penalty_rate = float(stake["early_withdrawal_penalty"]) if is_early_withdrawal else 0.0
        penalty_amount = float(stake["amount"]) * penalty_rate if is_early_withdrawal else 0.0
        
        return_amount = float(stake["amount"]) - penalty_amount
        accrued_reward = float(stake["accrued_reward"])

        # 4. Confirma√ß√£o de retirada antecipada
        if is_early_withdrawal and not confirm_early_withdrawal:
            return jsonify({
                "requires_confirmation": True,
                "warning": "RETIRADA ANTECIPADA DETECTADA",
                "penalty_rate": f"{penalty_rate * 100}%",
                "penalty_amount": penalty_amount,
                "original_amount": float(stake["amount"]),
                "return_amount": return_amount,
                "accrued_rewards": accrued_reward,
                "days_remaining": days_remaining,
                "message": "Confirma√ß√£o de retirada antecipada necess√°ria."
            }), 400

        cursor.execute("BEGIN")

        # 5. Registrar no ledger (devolu√ß√£o do principal)
        cursor.execute(
            "INSERT INTO ledger_entries (user_id, asset, amount, entry_type, related_id, description) VALUES (%s, %s, %s, %s, %s, %s)",
            (user_id, stake["asset"], return_amount, "unstake_principal", stake_id, 
             f"Retirada do principal do staking {stake_id} (Penalidade: {penalty_amount:.6f}) - ADMIN")
        )

        # 6. Registrar no ledger (recompensa acumulada)
        if accrued_reward > 0:
            cursor.execute(
                "INSERT INTO ledger_entries (user_id, asset, amount, entry_type, related_id, description) VALUES (%s, %s, %s, %s, %s, %s)",
                (user_id, stake["asset"], accrued_reward, "unstake_reward", stake_id, 
                 f"Recompensa acumulada do staking {stake_id} - ADMIN")
            )

        # 7. Atualizar saldos (devolver principal + recompensa)
        total_return = return_amount + accrued_reward
        cursor.execute(
            "UPDATE balances SET available = available + %s, staking_balance = staking_balance - %s WHERE user_id = %s AND asset = %s",
            (total_return, stake["amount"], user_id, stake["asset"])
        )

        # 8. Atualizar registro de stake
        new_status = "withdrawn_early" if is_early_withdrawal else "withdrawn_mature"
        now = datetime.now(timezone.utc)
        cursor.execute(
            "UPDATE stakes SET status = %s, actual_return = %s, penalty_applied = %s, withdrawn_at = %s WHERE id = %s",
            (new_status, total_return, penalty_amount, now, stake_id)
        )

        conn.commit()

        return jsonify({
            "success": True,
            "message": f"Staking {stake_id} retirado com sucesso pelo ADMIN.",
            "total_received": total_return,
            "returned_amount": return_amount,
            "accrued_rewards": accrued_reward,
            "penalty_applied": penalty_amount,
            "status": new_status
        }), 200

    except Exception as e:
        conn.rollback()
        print(f"[ADMIN UNSTAKE] Erro: {e}")
        return jsonify({"error": f"Erro ao retirar staking: {e}"}), 500
    finally:
        conn.close()

# ‚úÖ PROCESSAMENTO CORRIGIDO
@admin_bp.route('/admin/process-payments', methods=['POST'])
@admin_required
def process_payments():
    data = request.json
    payment_ids = data.get('payment_ids', [])
    admin_user = data.get('admin_user', 'admin')
    
    if not payment_ids:
        return jsonify({"error": "Nenhum pagamento selecionado"}), 400
    
    print(f"üîÑ Processando {len(payment_ids)} pagamentos: {payment_ids}")
    
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        cursor.execute("BEGIN")
        processed_count = 0
        errors = []
        
        for payment_id in payment_ids:
            try:
                # ‚úÖ BUSCAR PAGAMENTO COM BLOQUEIO PARA EVITAR CONCORR√äNCIA
                cursor.execute('''
                    SELECT id, email, amount, metadata 
                    FROM payments 
                    WHERE id = %s AND status = 'pending'
                    FOR UPDATE
                ''', (payment_id,))
                
                payment = cursor.fetchone()
                
                if not payment:
                    errors.append(f"Pagamento {payment_id} n√£o encontrado ou j√° processado")
                    continue
                
                # ‚úÖ C√ÅLCULO GARANTIDO
                amount_brl = float(payment['amount'])
                alz_amount = calculate_alz_from_brl(amount_brl)
                
                print(f"üí∞ Processando: R$ {amount_brl} ‚Üí {alz_amount} ALZ para {payment['email']}")
                
                # ‚úÖ BUSCAR/CRIAR USU√ÅRIO
                cursor.execute(
                    "SELECT id, wallet_address FROM users WHERE email = %s",
                    (payment['email'],)
                )
                user = cursor.fetchone()
                
                user_id = None
                if user:
                    user_id = user['id']
                    print(f"‚úÖ Usu√°rio encontrado: {user_id}")
                else:
                    # Criar usu√°rio se n√£o existir
                    cursor.execute(
                        "INSERT INTO users (email, created_at) VALUES (%s, NOW()) RETURNING id",
                        (payment['email'],)
                    )
                    user_id = cursor.fetchone()['id']
                    print(f"‚úÖ Novo usu√°rio criado: {user_id}")
                
                # ‚úÖ VERIFICAR/CRIAR BALANCE
                cursor.execute(
                    "SELECT id FROM balances WHERE user_id = %s AND asset = 'ALZ'",
                    (user_id,)
                )
                balance = cursor.fetchone()
                
                if not balance:
                    cursor.execute(
                        "INSERT INTO balances (user_id, asset, available, staking_balance) VALUES (%s, 'ALZ', 0, 0)",
                        (user_id,)
                    )
                    print(f"‚úÖ Balance criado para usu√°rio {user_id}")
                
                # ‚úÖ CREDITAR TOKENS
                cursor.execute(
                    "UPDATE balances SET available = available + %s WHERE user_id = %s AND asset = 'ALZ'",
                    (alz_amount, user_id)
                )
                
                # ‚úÖ REGISTRAR NO LEDGER
                cursor.execute(
                    """INSERT INTO ledger_entries 
                       (user_id, asset, amount, entry_type, description) 
                       VALUES (%s, %s, %s, %s, %s)""",
                    (user_id, 'ALZ', alz_amount, 'purchase', 
                     f'Compra de {alz_amount} ALZ via PIX - R$ {amount_brl}')
                )
                
                # ‚úÖ ATUALIZAR PAGAMENTO
                cursor.execute(
                    """UPDATE payments 
                       SET status = 'completed', 
                           processed_at = NOW(),
                           metadata = COALESCE(metadata, '{}'::jsonb) || jsonb_build_object('alz_amount_processed', %s)
                       WHERE id = %s""",
                    (alz_amount, payment_id)
                )
                
                processed_count += 1
                print(f"‚úÖ Pagamento {payment_id} processado com sucesso!")
                
            except Exception as e:
                error_msg = f"Erro no pagamento {payment_id}: {str(e)}"
                errors.append(error_msg)
                print(f"‚ùå {error_msg}")
                continue
        
        if errors:
            conn.rollback()
            return jsonify({
                "success": False,
                "error": f"Processamento parcialmente falhou",
                "processed_count": processed_count,
                "errors": errors
            }), 400
        
        conn.commit()
        
        return jsonify({
            "success": True,
            "message": f"‚úÖ {processed_count} pagamentos processados com sucesso!",
            "processed_count": processed_count,
            "total_alz_distributed": processed_count * alz_amount if processed_count > 0 else 0
        }), 200
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Erro geral no processamento: {str(e)}")
        return jsonify({"error": f"Erro no servidor: {str(e)}"}), 500
    finally:
        conn.close()

# ‚úÖ ESTAT√çSTICAS CORRIGIDAS
@admin_bp.route('/admin/stats', methods=['GET'])
@admin_required
def get_stats():
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        # Supply Total
        TOTAL_SUPPLY = 1000000000
        
        # Tokens em circula√ß√£o
        cursor.execute("SELECT SUM(available + staking_balance) as circulating FROM balances WHERE asset = 'ALZ'")
        circulating_result = cursor.fetchone()
        circulating = float(circulating_result['circulating'] or 0)
        
        # ‚úÖ PAGAMENTOS PENDENTES CALCULADOS CORRETAMENTE
        cursor.execute("SELECT SUM(amount) as pending_brl FROM payments WHERE status = 'pending'")
        pending_brl_result = cursor.fetchone()
        pending_brl = float(pending_brl_result['pending_brl'] or 0)
        pending_alz = calculate_alz_from_brl(pending_brl)
        
        # Estat√≠sticas
        cursor.execute('''
            SELECT 
                COUNT(*) as total_users,
                (SELECT COUNT(*) FROM payments) as total_payments,
                (SELECT COUNT(*) FROM payments WHERE status = 'completed') as completed_payments,
                (SELECT COUNT(*) FROM payments WHERE status = 'pending') as pending_payments,
                (SELECT SUM(amount) FROM payments WHERE status = 'completed') as total_processed_brl
        ''')
        stats_result = cursor.fetchone()
        
        total_processed_alz = calculate_alz_from_brl(stats_result['total_processed_brl'] or 0)
        
        return jsonify({
            "success": True,
            "stats": {
                "supply": {
                    "total": TOTAL_SUPPLY,
                    "circulating": circulating,
                    "pending_distribution": pending_alz,
                    "reserve": TOTAL_SUPPLY - circulating - pending_alz
                },
                "users": {
                    "total_users": stats_result['total_users']
                },
                "payments": {
                    "total_payments": stats_result['total_payments'],
                    "completed_payments": stats_result['completed_payments'],
                    "pending_payments": stats_result['pending_payments'],
                    "total_processed_brl": pending_brl,
                    "total_processed_alz": total_processed_alz
                }
            }
        }), 200
        
    except Exception as e:
        print(f"‚ùå Erro nas estat√≠sticas: {str(e)}")
        return jsonify({"error": str(e)}), 500
    finally:
        conn.close()

# ‚úÖ ENVIO MANUAL CORRIGIDO
@admin_bp.route('/admin/manual-token-send', methods=['POST'])
@admin_required
def manual_token_send():
    data = request.json
    email = data.get('email')
    amount = data.get('amount')
    description = data.get('description', 'Cr√©dito administrativo manual')
    
    if not email or not amount:
        return jsonify({"error": "Email e quantidade s√£o obrigat√≥rios"}), 400
    
    try:
        amount_alz = float(amount)
    except ValueError:
        return jsonify({"error": "Quantidade deve ser um n√∫mero v√°lido"}), 400
    
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        cursor.execute("BEGIN")
        
        # Buscar ou criar usu√°rio
        cursor.execute("SELECT id FROM users WHERE email = %s", (email,))
        user = cursor.fetchone()
        
        if not user:
            cursor.execute(
                "INSERT INTO users (email, created_at) VALUES (%s, NOW()) RETURNING id",
                (email,)
            )
            user_id = cursor.fetchone()['id']
        else:
            user_id = user['id']
        
        # Verificar balance
        cursor.execute(
            "SELECT id FROM balances WHERE user_id = %s AND asset = 'ALZ'",
            (user_id,)
        )
        balance = cursor.fetchone()
        
        if not balance:
            cursor.execute(
                "INSERT INTO balances (user_id, asset, available, staking_balance) VALUES (%s, 'ALZ', 0, 0)",
                (user_id,)
            )
        
        # Creditar
        cursor.execute(
            "UPDATE balances SET available = available + %s WHERE user_id = %s AND asset = 'ALZ'",
            (amount_alz, user_id)
        )
        
        # Registrar
        cursor.execute(
            "INSERT INTO ledger_entries (user_id, asset, amount, entry_type, description) VALUES (%s, %s, %s, %s, %s)",
            (user_id, 'ALZ', amount_alz, 'manual_credit', description)
        )
        
        conn.commit()
        
        return jsonify({
            "success": True,
            "message": f"‚úÖ {amount_alz} ALZ creditados para {email}",
            "amount_alz": amount_alz,
            "email": email
        }), 200
        
    except Exception as e:
        conn.rollback()
        return jsonify({"error": str(e)}), 500
    finally:
        conn.close()

# ‚úÖ DEBUG CORRIGIDO
@admin_bp.route('/admin/debug-token', methods=['GET'])
def debug_token():
    token = request.headers.get('Authorization', '').replace('Bearer ', '')
    
    return jsonify({
        "token_received": token,
        "token_expected": SITE_ADMIN_TOKEN,
        "token_length_received": len(token),
        "token_length_expected": len(SITE_ADMIN_TOKEN),
        "match": token == SITE_ADMIN_TOKEN,
        "message": "Debug de token administrativo"
    }), 200
